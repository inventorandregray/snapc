#include <fstream>
#include <iostream>
#include <sstream>
#include <string>
#include <vector>
#include <cstdlib>

struct Inst {
    std::string type;
    std::string name;
    float freq;
    std::string wire;
};

int main(int argc, char** argv) {
    if (argc < 2) {
        std::cerr << "Usage: snapc input.snap\n";
        return 1;
    }

    std::ifstream fin(argv[1]);
    if (!fin) {
        std::cerr << "Cannot open " << argv[1] << "\n";
        return 1;
    }

    std::vector<Inst> insts;
    std::string finalWire;
    std::string line;

    while (std::getline(fin, line)) {
        if (line.find("SineOsc") == 0) {
            Inst it; it.freq = 440.0f;
            std::istringstream ss(line);
            std::string tok; ss >> tok >> it.name;
            size_t fpos = line.find("freq=");
            if (fpos != std::string::npos) {
                it.freq = atof(line.c_str()+fpos+5);
            }
            size_t outpos = line.find("out");
            if (outpos != std::string::npos) {
                std::istringstream s2(line.substr(outpos));
                s2 >> tok >> it.wire;
                while (!it.wire.empty() && !isalnum(it.wire[it.wire.size()-1]))
                    it.wire.erase(it.wire.size()-1);
            }
            insts.push_back(it);
        } else if (line.find("->") != std::string::npos) {
            if (line.find("audio.out") != std::string::npos) {
                std::string left = line.substr(0, line.find("->"));
                while (!left.empty() && isspace(left[0])) left.erase(0,1);
                while (!left.empty() && isspace(left[left.size()-1]))
                    left.erase(left.size()-1);
                finalWire = left;
            }
        }
    }

    std::ofstream out("generated.cpp");
    out << "// generated by snapc\n"
        << "#include <iostream>\n#include \"osc.h\"\n"
        << "#include <portaudio.h>\n"
        << "const int FRAMES_PER_BUFFER = 256;\n";

    for (size_t i=0; i<insts.size(); ++i) {
        out << "SineOsc " << insts[i].name << "(" << insts[i].freq << ");\n";
    }

    out << "static int paCallback(const void*, void* outputBuffer,\n"
        << "  unsigned long framesPerBuffer,\n"
        << "  const PaStreamCallbackTimeInfo*,\n"
        << "  PaStreamCallbackFlags,\n"
        << "  void*) {\n"
        << "    float *out = (float*)outputBuffer;\n"
        << "    float uout[256]; float* outs[1] = { uout }; float* ins[1] = { 0 };\n"
        << "    " << insts[0].name << ".process(framesPerBuffer, ins, outs);\n"
        << "    for (unsigned int f=0; f<framesPerBuffer; ++f) out[f] = uout[f];\n"
        << "    return 0;\n}\n";

    out << "int main(){\n"
        << "  Pa_Initialize();\n"
        << "  PaStream* stream;\n"
        << "  Pa_OpenDefaultStream(&stream,0,1,paFloat32,SAMPLE_RATE,FRAMES_PER_BUFFER,paCallback,0);\n"
        << "  Pa_StartStream(stream);\n"
        << "  std::cout<<\"Playing sine. Press Enter to stop...\"<<std::endl;\n"
        << "  std::cin.get();\n"
        << "  Pa_StopStream(stream);\n"
        << "  Pa_CloseStream(stream);\n"
        << "  Pa_Terminate();\n"
        << "  return 0;\n}\n";

    std::cout << "Generated generated.cpp\n";
    return 0;
}
